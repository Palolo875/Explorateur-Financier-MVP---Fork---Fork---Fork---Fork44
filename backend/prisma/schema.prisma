generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  passwordHash String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isActive     Boolean       @default(true)
  lastLoginAt  DateTime?
  transactions Transaction[]
  goals        Goal[]
  emotions     Emotion[]
  notifications Notification[]

  @@map("users")
}

model Transaction {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  amount      Decimal  @db.Decimal(12,2)
  category    String
  description String?
  source      String   // plaid|manual|import
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date])
  @@index([userId, category])
  @@index([date])
  @@map("transactions")
}

model Goal {
  id            String   @id @default(cuid())
  userId        String
  title         String
  targetAmount  Decimal  @db.Decimal(12,2)
  currentAmount Decimal  @db.Decimal(12,2) @default(0)
  deadline      DateTime?
  status        String   @default("active") // active|completed|paused|cancelled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, status])
  @@index([userId, updatedAt])
  @@map("goals")
}

model Emotion {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  mood      String
  note      String?
  intensity Int?     @default(5) // 1-10 scale
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, date])
  @@index([userId, mood])
  @@map("emotions")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // insight|warning|tip|reminder
  title     String?
  message   String
  data      Json?    // Additional metadata
  createdAt DateTime @default(now())
  readAt    DateTime?
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([userId, read])
  @@map("notifications")
}
