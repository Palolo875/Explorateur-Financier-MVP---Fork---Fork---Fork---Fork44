#!/bin/bash

set -e

# Configuration
ENVIRONMENT=${1:-staging}
IMAGE_TAG=${2:-latest}
NAMESPACE="finance-app-${ENVIRONMENT}"

echo "üöÄ D√©ploiement de l'API Finance vers l'environnement: $ENVIRONMENT"
echo "üì¶ Image tag: $IMAGE_TAG"

# V√©rifications pr√©alables
if ! command -v kubectl &> /dev/null; then
    echo "‚ùå kubectl n'est pas install√©"
    exit 1
fi

if ! command -v helm &> /dev/null; then
    echo "‚ùå helm n'est pas install√©"
    exit 1
fi

# Cr√©er le namespace s'il n'existe pas
kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

# V√©rifier la connectivit√© au cluster
echo "üîç V√©rification de la connectivit√© au cluster Kubernetes..."
kubectl cluster-info

# Appliquer les secrets (√† adapter selon votre gestionnaire de secrets)
echo "üîê Application des secrets..."
if [ "$ENVIRONMENT" = "production" ]; then
    kubectl apply -f k8s/secrets/production.yaml -n $NAMESPACE
else
    kubectl apply -f k8s/secrets/staging.yaml -n $NAMESPACE
fi

# Mettre √† jour l'image dans le deployment
echo "üìù Mise √† jour de l'image du d√©ploiement..."
sed -i "s|image: ghcr.io/.*|image: ghcr.io/your-org/finance-app/backend:$IMAGE_TAG|g" k8s/deployment.yaml

# Appliquer les manifestes Kubernetes
echo "üîÑ Application des manifestes Kubernetes..."
kubectl apply -f k8s/ -n $NAMESPACE

# Attendre que le d√©ploiement soit pr√™t
echo "‚è≥ Attente de la disponibilit√© du d√©ploiement..."
kubectl rollout status deployment/finance-api -n $NAMESPACE --timeout=300s

# Ex√©cuter les migrations de base de donn√©es
echo "üóÑÔ∏è Ex√©cution des migrations de base de donn√©es..."
kubectl run migration-job-$(date +%s) \
  --image=ghcr.io/your-org/finance-app/backend:$IMAGE_TAG \
  --restart=Never \
  --rm -i \
  --env="DATABASE_URL=$(kubectl get secret finance-api-secrets -n $NAMESPACE -o jsonpath='{.data.database-url}' | base64 -d)" \
  -- npm run migrate:deploy

# V√©rifications post-d√©ploiement
echo "üè• V√©rifications de sant√©..."
INGRESS_IP=$(kubectl get ingress finance-api-ingress -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
if [ -z "$INGRESS_IP" ]; then
    INGRESS_IP=$(kubectl get service finance-api-service -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
fi

if [ ! -z "$INGRESS_IP" ]; then
    echo "üåê Test de l'endpoint de sant√©..."
    for i in {1..30}; do
        if curl -f "http://$INGRESS_IP/health" > /dev/null 2>&1; then
            echo "‚úÖ Endpoint de sant√© accessible"
            break
        fi
        echo "‚è≥ Tentative $i/30..."
        sleep 10
    done
else
    echo "‚ö†Ô∏è Impossible de r√©cup√©rer l'IP d'ingress, test de sant√© ignor√©"
fi

# Afficher les informations de d√©ploiement
echo ""
echo "üìä Informations de d√©ploiement:"
kubectl get pods -n $NAMESPACE -l app=finance-api
kubectl get services -n $NAMESPACE
kubectl get ingress -n $NAMESPACE

echo ""
echo "‚úÖ D√©ploiement termin√© avec succ√®s!"
echo "üåê URL de l'API: https://api-${ENVIRONMENT}.your-domain.com"
echo "üìö Documentation: https://api-${ENVIRONMENT}.your-domain.com/docs"

# Envoyer une notification (optionnel)
if [ ! -z "$SLACK_WEBHOOK_URL" ]; then
    curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"üöÄ D√©ploiement r√©ussi de l'API Finance vers $ENVIRONMENT avec l'image $IMAGE_TAG\"}" \
        $SLACK_WEBHOOK_URL
fi